@model IEnumerable<GetAllCoursesVM>

@{
    ViewData["Title"] = "Courses";
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<form asp-action="Index" method="get" class="mb-4">
    <div class="row g-2 align-items-center">
        <div class="col-md-5">
            <div class="input-group shadow-sm">
                <span class="input-group-text bg-white border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" id="searchName" name="name"
                       class="form-control border-start-0"
                       placeholder="Search by Name ..."
                       value="@Context.Request.Query["name"]" />
            </div>
        </div>

        <div class="col-md-5">
            <div class="input-group shadow-sm">
                <span class="input-group-text bg-white border-end-0">
                    <i class="bi bi-tags text-muted"></i>
                </span>
                <input type="text" id="searchCategory" name="category"
                       class="form-control border-start-0"
                       placeholder="Search by Category ..."
                       value="@Context.Request.Query["category"]" />
            </div>
        </div>

        <div class="col-md-2 d-flex">
            <a asp-action="Index" class="btn btn-outline-secondary w-100 shadow-sm">
                <i class="bi bi-x-circle"></i> Reset
            </a>
        </div>
    </div>
</form>


<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold text-primary">Courses</h2>
        <a asp-action="AddCourse" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create New
        </a>
    </div>

    <div id="coursesTable">
        @await Html.PartialAsync("_CoursesTable", Model)
    </div>
</div>

@section Scripts {
    <script>
        const nameInput = document.getElementById("searchName");
        const categoryInput = document.getElementById("searchCategory");

        function loadCourses() {
            const name = nameInput.value;
            const category = categoryInput.value;

            fetch(`/Course/Index?name=${name}&category=${category}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
            .then(res => res.text())
            .then(html => {
                document.getElementById("coursesTable").innerHTML = html;
            });
        }

        nameInput.addEventListener("keyup", loadCourses);
        categoryInput.addEventListener("keyup", loadCourses);
    </script>
}
